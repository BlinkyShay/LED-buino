#include <Gamebuino-Meta.h>

byte playerposX = 37, playerposY = 48; //player position
int playerSpeed = 0; // speed of player ( 1 = 1 pixel per frame )
int gateRangeposY = -1; //gate Y position
byte gateColor[5]; // colors of each gate ( from 1 to 4 / 1 to 5 )
byte drowGate; // gate number, which player must go through
byte sizeOfGate; // size of gate ( 16px or 20px)
byte currentColor; // color which drow gate have
byte numberOfStars = 30, starposX [30], starposY [30], starSpeed [30], starColor [30];
int score = 0;
bool endOfGame = false; // true if player lose
bool displayMenu = true;
bool displayColor = false;
bool easyMode = false;
bool gateSwitch = false;
bool devTest = false; // turn off / on collision 

const uint8_t playerData[] = {6, 17, 9, 0, 2, 0x00, 1, 0x02, 0x22,0x20, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x02, 0x22,0x20, 0x02,0x22, 0x20,0x02, 0x22,0x02, 0x00,0x22, 0x00,0x00, 0x22,0x00, 0x20,0x20, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x02,0x22, 0x20,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x02,0x22, 0x20,0x02, 0x22,0x20, 0x02,0x22, 0x02,0x00, 0x22,0x02, 0x00,0x22, 0x00,0x00, 0x20,0x00, 0x20,0x20, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x02, 0x22,0x20, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x02, 0x22,0x20, 0x02,0x22, 0x20,0x02, 0x22,0x00, 0x00,0x22, 0x02,0x00, 0x22,0x02, 0x00,0x22, 0x00,0x00, 0x22,0x00, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x02,0x22, 0x20,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x20,0x02, 0x22,0x20, 0x02,0x22, 0x00,0x00, 0x22,0x00, 0x00,0x22, 0x02,0x00, 0x22,0x02, 0x00,0x22, 0x00,0x00, 0x20,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x02, 0x22,0x20, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x02, 0x22,0x20, 0x22,0x22, 0x20,0x02, 0x22,0x00, 0x00,0x22, 0x00,0x00, 0x22,0x00, 0x00,0x20, 0x02,0x00, 0x02,0x02, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x02,0x22, 0x20,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x02,0x22, 0x20,0x02, 0x22,0x20, 0x22,0x22, 0x00,0x00, 0x22,0x00, 0x00,0x22, 0x00,0x00, 0x20,0x00, 0x00,0x00, 0x02,0x00, 0x02,0x02, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x02, 0x22,0x20, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x02, 0x22,0x20, 0x02,0x22, 0x20,0x02, 0x22,0x00, 0x20,0x22, 0x00,0x00, 0x22,0x00, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x02,0x00, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x02,0x22, 0x20,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x02,0x22, 0x22,0x02, 0x22,0x20, 0x02,0x22, 0x00,0x20, 0x22,0x00, 0x20,0x22, 0x00,0x00, 0x20,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x02,0x00, 0x00,0x20, 0x00,0x02, 0x22,0x20, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x02, 0x22,0x20, 0x02,0x22, 0x22,0x02, 0x22,0x00, 0x00,0x22, 0x00,0x20, 0x22,0x00, 0x20,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x02, 0x00,0x00, 0x00,0x0000};
Image player = Image(playerData);

const uint8_t playerRightData[] = {2, 17, 6, 0, 2, 0x00, 1, 0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x20,0x20, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x20, 0x20,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x02, 0x02,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x02,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00};
Image playerRight = Image(playerRightData);

const uint8_t playerLeftData[] = {2, 17, 6, 0, 2, 0x00, 1, 0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x02, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x02,0x02, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x02, 0x02,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x20, 0x20,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x20,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00};
Image playerLeft = Image(playerLeftData);

const uint8_t aButtonData[] = {8, 8, 1, 0, 1, 0x00, 1, 0x02, 0x88,0x88, 0x80,0x28, 0x88,0x28, 0x88,0x28, 0x82,0x82, 0x88,0x28, 0x82,0x22, 0x88,0x28, 0x82,0x82, 0x88,0x28, 0x82,0x82, 0x88,0x02, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x00};
Image aButton = Image(aButtonData);

const uint8_t bButtonData[] = {8, 8, 1, 0, 1, 0x00, 1, 0x02, 0x88,0x88, 0x80,0x28, 0x82,0x22, 0x88,0x28, 0x82,0x82, 0x88,0x28, 0x82,0x28, 0x88,0x28, 0x82,0x82, 0x88,0x28, 0x82,0x22, 0x88,0x02, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x00};
Image bButton = Image(bButtonData);

const uint8_t menuButtonData[] = {22, 8, 1, 0, 1, 0x00, 1, 0x02, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x80, 0x28,0x82, 0x22,0x22, 0x82,0x22, 0x82,0x22, 0x82,0x82, 0x88,0x28, 0x82,0x82, 0x82,0x82, 0x88,0x82, 0x82,0x82, 0x82,0x88, 0x28,0x82, 0x82,0x82, 0x82,0x22, 0x82,0x82, 0x82,0x82, 0x88,0x28, 0x82,0x82, 0x82,0x82, 0x88,0x82, 0x82,0x82, 0x82,0x88, 0x28,0x82, 0x82,0x82, 0x82,0x22, 0x82,0x82, 0x82,0x22, 0x88,0x02, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x80, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00};
Image menuButton = Image(menuButtonData);

const uint8_t youLostData[] = {74, 14, 1, 0, 1, 0xFF, 1, 0x00, 0x22,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x00, 0x00,0x22, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x00,0x22, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x22, 0x88,0x22, 0x22,0x22, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x22,0x88, 0x22,0x22, 0x22,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x22, 0x88,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x22, 0x22,0x88, 0x88,0x88, 0x88,0x22, 0x22,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x88, 0x22,0x88, 0x88,0x22, 0x22,0x22, 0x88,0x88, 0x88,0x88, 0x22,0x22, 0x22,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x22, 0x88,0x88, 0x88,0x22, 0x88,0x88, 0x22,0x88, 0x88,0x00, 0x22,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x00, 0x00,0x22, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x00};
Image youLost = Image(youLostData);

void drowStarsPosition () {
  byte i = 0;
  while (i < numberOfStars) {
    starposX[i] = random(0, 80);
    starposY[i] = random(0, 64);
    starSpeed[i] = random(1, 5);
    starColor[i] = random(0, 4);
    i = i + 1;
  }
}

void setgateColor () {  // drow colors for gates 
  
  byte color;
  bool repeatDraw = true;

  for (byte i = 0; i < 5; i++) {
    gateColor[i] = 7;
  }

  for (byte i = 0; i < 5; i++) {
    do {
      color = random(5);
      for (byte j = 0; j < 5; j++) {
        if ( gateColor[j] == color ) {
          repeatDraw = true;
          break;
        } else {
          repeatDraw = false;
        }
      }
    } while (repeatDraw);
    gateColor[i] = color;
  }
}

void setGatePosition () { // update gate position
  if (gateRangeposY > 63) {
    gateRangeposY = -1;
    gateSwitch = false;
  }

  if ( gateSwitch == false) {
    gateRangeposY += 1;
    gateSwitch = true;
  } else {
    gateRangeposY += 2;
    gateSwitch = false;
  }
}

void setCurrentColor () { // set color to display
  if( easyMode == true ) {
    drowGate = random(4);
  } else {
    drowGate = random(5);
  }
  currentColor = gateColor[drowGate];
}

bool playerPosition () { // check player position, return true if player lost 
 
  byte startOfGate = ( sizeOfGate * drowGate );
  byte endOfGate = startOfGate;

  if( easyMode == true ) {
    endOfGate += 14;
  } else {
    endOfGate += 10;
  }
  

  if ( (playerposX >= startOfGate) && (playerposX <= endOfGate )) {
    gb.sound.playTick();
    return false;
  } else {
    gb.sound.playCancel();
    return true;
  }
}

void getSizeOfGate () { // used when player change difficulty level
  if( easyMode == true ) {
    sizeOfGate = 20;
  } else {
    sizeOfGate = 16;
  }
}

void displayCurrentColorOnScreen () {

  if ( currentColor == 0) {
    gb.display.setColor(PINK);
  } else if (currentColor == 1) {
    gb.display.setColor(GREEN);
  } else if (currentColor == 2) {
    gb.display.setColor(LIGHTBLUE);
  } else if (currentColor == 3) {
    gb.display.setColor(YELLOW);
  } else if (currentColor == 4) {
    gb.display.setColor(WHITE);
  } else if (currentColor == 5) {
    gb.display.setColor(RED);
  }

  gb.display.setCursor(48, 1);
  gb.display.print("COLOR");
}

void displayCurrentColorOnLED () {
  if (currentColor == 0) {
    gb.lights.fill(PINK);
  } else if ( currentColor == 1 ) {
    gb.lights.fill(GREEN);
  } else if ( currentColor == 2 ) {
    gb.lights.fill(BLUE);
  } else if ( currentColor == 3 ) {
    gb.lights.fill(YELLOW);
  } else if ( currentColor == 4 ) {
    gb.lights.fill(WHITE);
  } else if ( currentColor == 5 ) {
    gb.lights.fill(RED);
  }
}

void drawStars () {

  byte i = 0;
  while (i < numberOfStars) {

    starposY[i] += starSpeed[i];

    if ( starColor[i] == 0 ) {
      gb.display.setColor(YELLOW);
    } else if ( starColor[i] == 1 ) {
      gb.display.setColor(WHITE);
    } else if ( starColor[i] == 2 ) {
      gb.display.setColor(PINK);
    } else if ( starColor[i] == 3 ) {
      gb.display.setColor(BLUE);
    } else if ( starColor[i] == 4 ) {
      gb.display.setColor(GREEN);
    } 
    gb.display.drawPixel(starposX[i], starposY[i]);

    if (starposY[i] >= 64) {
      starposY[i] = 0;
      starposX[i] = random(0, 80);
      starSpeed[i] = random(1, 5);
      starColor[i] = random(0, 4);
    }
    i += 1;
  }
}

void drawGate () {
  for (byte i = 0; i < 5; i++) {
    if (gateColor[i] == 0) {
      gb.display.setColor(PINK);
    } else if (gateColor[i] == 1) {
      gb.display.setColor(GREEN);
    } else if (gateColor[i] == 2) {
      gb.display.setColor(LIGHTBLUE);
    } else if (gateColor[i] == 3) {
      gb.display.setColor(YELLOW);
    } else if (gateColor[i] == 4) {
      gb.display.setColor(WHITE);
    } else if (gateColor[i] == 5) {
      gb.display.setColor(RED);
    }

    gb.display.fillRect( sizeOfGate * i, gateRangeposY, 20, 4);
  }
}

void drawPlayer () {
  gb.display.drawImage(playerposX, playerposY, player);

  if ( playerSpeed < 0 ) {
    gb.display.drawImage(playerposX + 6, playerposY, playerRight);
  }
  if ( playerSpeed > 0 ) {
    gb.display.drawImage(playerposX - 2, playerposY, playerLeft);
  }
}

void drawGameOn () {
  drawStars ();
  drawGate ();
  displayCurrentColorOnLED();

  gb.display.setColor(DARKGRAY);
  gb.display.fillRect( 0 , 0, 80, 7);

  if ( displayColor == true ) {
    displayCurrentColorOnScreen();
  }

  gb.display.setCursor( 1, 1);
  gb.display.setColor(WHITE);
  gb.display.print("SCORE:");
  gb.display.print(score);
  drawPlayer();
}

void drawLostGame () {
  drawStars ();
  drawGate ();
  drawPlayer();
  gb.display.drawImage(3, 3, youLost);
  gb.display.setColor(RED);
  gb.display.setCursor(24, 19);
  gb.display.print("score:");
  gb.display.print(score);
  gb.display.setColor(GREEN);
  gb.display.setCursor(3, 35);
  gb.display.print("press");
  gb.display.drawImage(26, 34, aButton);
  gb.display.setCursor(37, 35);
  gb.display.print("to restart");
}

void drowMenu () {

  gb.display.drawImage(4, 17, aButton);
  gb.display.drawImage(4, 32, bButton);
  gb.display.drawImage(28, 6, menuButton);
  
  gb.display.setColor(WHITE);
  gb.display.setCursor(15, 18);
  gb.display.print("difficulty");
 
  gb.display.setCursor(18, 25);
  if( easyMode == true ) {
    gb.display.setColor(GREEN);
    gb.display.print("easy");
  } else {
    gb.display.setColor(RED);
    gb.display.print("hard");
  }

  gb.display.setColor(WHITE);
  gb.display.setCursor(15, 33);
  gb.display.print("display color");

  gb.display.setCursor(18, 40);
  if( displayColor == true ) {
    gb.display.setColor(GREEN);
    gb.display.print("true");
  } else {
    gb.display.setColor(RED);
    gb.display.print("false");
  }
  
}

void resetGame () {
  playerposX = 37;
  playerposY = 48;
  playerSpeed = 0;
  gateRangeposY = -1; //gate Y position
  endOfGame = false;
  score = 0;
  
  setgateColor();
  setCurrentColor();
}

void setup() {
  gb.begin();
  drowStarsPosition();
  setgateColor();
  getSizeOfGate();
}

void loop() {

  while (!gb.update());
    gb.display.clear();

  if ( endOfGame == false && displayMenu == false) {

    if ( gateRangeposY == 0 ) {
      setgateColor();
      setCurrentColor();
    }

    setGatePosition();

    if ( (gateRangeposY == 45 || gateRangeposY == 46) ) {
      if ( devTest == false ) {
        endOfGame = playerPosition();
      }
      if ( endOfGame == false) {
        score += 1;
      }
    }

    if ( endOfGame == false ) {

      if ( playerposX - 2 >= 0 && gb.buttons.repeat(BUTTON_LEFT, 1)) {
        if ( playerSpeed > 0 ) {
          playerSpeed = 0;
        }
        playerSpeed--;
        if (playerSpeed < -10 && playerposX - 4 >= 0) {
          playerposX -= 4;
        } else {
          playerposX -= 2;
        }

      } else if (playerposX + 2 <= 80 - 6 && ( gb.buttons.repeat(BUTTON_RIGHT, 1) || gb.buttons.repeat(BUTTON_B, 1))) {
        if ( playerSpeed < 0 ) {
          playerSpeed = 0;
        }
        playerSpeed++;
        if (playerSpeed > 10 && playerposX + 4 <= 74) {
          playerposX += 4;
        } else {
          playerposX += 2;
        }
      }
    }

    if (gb.buttons.released(BUTTON_RIGHT) || gb.buttons.released(BUTTON_LEFT)) {
      playerSpeed = 0;
    }

    drawGameOn();
  }
  else if ( endOfGame == true && displayMenu == false) {
    drawLostGame();
  } else if ( displayMenu == true ) {

    if (gb.buttons.pressed(BUTTON_B)) {
      if ( displayColor == false ) {
        displayColor = true;
      } else {
        displayColor = false;
      }
    }

    if (gb.buttons.pressed(BUTTON_A)) {
      
      if ( easyMode == false ) {
        easyMode = true;
      } else {
        easyMode = false;
      }
      getSizeOfGate();
      resetGame();
    } 
    drawStars();
    drowMenu();
  }

  if ( endOfGame == true && (gb.buttons.pressed( BUTTON_A)) ) {
    resetGame();
  }

  if (gb.buttons.pressed(BUTTON_MENU)) {
    if ( displayMenu == false) {
      displayMenu = true;
    } else {
      displayMenu = false;
    }
  }
}
